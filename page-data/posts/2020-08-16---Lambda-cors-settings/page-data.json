{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/2020-08-16---Lambda-cors-settings/","result":{"data":{"markdownRemark":{"id":"608ec720-f0cf-5db2-8920-fe3d6109c7fe","html":"<p>sls（Serverless Framework）を使用してローカルで開発＆デバッグを行い、deploy コマンドで Lambda へアップロードしたところ、関数を実行すると <code class=\"language-text\">&#39;Access-Control-Allow-Origin&#39; header is present on the requested resource.</code> が発生する状況になり、ハマったため内容を共有。</p>\n<p>状況</p>\n<ul>\n<li>sls の yaml で <code class=\"language-text\">cors: True</code> とし、cors を許可している</li>\n<li>関数の戻り値には headers を設定し、 <code class=\"language-text\">&#39;Access-Control-Allow-Origin&#39;: &#39;*&#39;</code> を設定</li>\n<li>ローカルでは cors のエラーは出ない</li>\n<li>プリフライトの OPTIONS リクエストは 200 が返る</li>\n<li>POST リクエストだけ 502 が返る</li>\n</ul>\n<p>CloudWatch に吐かれるログを確認するも決定的な情報がなく、しばらくハマったが、結局のところ原因は関数が返すオブジェクトのフォーマットの問題であった。</p>\n<p>handler 関数は下記のフォーマットのオブジェクトを return する必要がある。</p>\n<p>参考）<a href=\"https://aws.amazon.com/jp/premiumsupport/knowledge-center/malformed-502-api-gateway/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://aws.amazon.com/jp/premiumsupport/knowledge-center/malformed-502-api-gateway/</a></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"isBase64Encoded\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token operator\">|</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"statusCode\"</span><span class=\"token operator\">:</span> httpStatusCode<span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"headers\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"headerName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"headerValue\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"body\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"...\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>今回は body のところにオブジェクトを突っ込んでしまっていたため、フォーマットが間違っているということでエラーが発生していた。</p>\n<p>そのため、JSON.stringify で body の内容を文字列化することで解決した。</p>\n<p>ダメな例</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\tmessage<span class=\"token operator\">:</span> <span class=\"token string\">\"message text\"</span><span class=\"token punctuation\">,</span>\n\tstatus<span class=\"token operator\">:</span> <span class=\"token string\">\"OK\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token string\">\"statusCode\"</span><span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"headers\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// 省略</span>\n\t<span class=\"token string\">\"body\"</span><span class=\"token operator\">:</span> data\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">return</span> response<span class=\"token punctuation\">;</span></code></pre></div>\n<p>よい例</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\tmessage<span class=\"token operator\">:</span> <span class=\"token string\">\"message text\"</span><span class=\"token punctuation\">,</span>\n\tstatus<span class=\"token operator\">:</span> <span class=\"token string\">\"OK\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token string\">\"statusCode\"</span><span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"headers\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// 省略</span>\n\t<span class=\"token string\">\"body\"</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token comment\">// オブジェクトを文字列化</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">return</span> response<span class=\"token punctuation\">;</span></code></pre></div>\n<p>ずいぶん初歩的な話だけど、久しぶりにハマってしまった。\nsls のローカル環境は便利だけれど、Lambda とは異なることを理解しなければならないと感じた。</p>","fields":{"slug":"/posts/2020-08-16---Lambda-cors-settings/","tagSlugs":["/tag/lambda/","/tag/node-js/"]},"frontmatter":{"date":"2020-08-16T11:50:00.000Z","description":"Lambdaでcorsエラーが出てハマった際のメモ。","tags":["Lambda","Node.js"],"title":"Lambda(Node.js)でcorsエラー","socialImage":"/media/aws/lambda.png"}}},"pageContext":{"slug":"/posts/2020-08-16---Lambda-cors-settings/"}},"staticQueryHashes":["251939775","3942705351","401334301"]}